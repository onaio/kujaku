apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

task javaDoc(type: Javadoc) {
    failOnError false
    def mainSrc = "$project.projectDir/src/main/java"
    source = files([mainSrc])
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    //classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javaDoc) {
    classifier = 'javadoc'
    from javaDoc.destinationDir
}

/**
 * Retrieves property `ossrhPassword` stored in the gradle.properties file (in project or gradle user-root folder)
 * @return
 */
def getOSSRHRepositoryPassword() {
    return hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("OSSRH_PASSWORD") != null ? System.getenv("OSSRH_PASSWORD") : ""
}

/**
 * Retrieves property `ossrhUsername` stored in the gradle.properties file (in project or gradle user-root folder)
 * @return
 */
def getOSSRHRepositoryUsername() {
    return hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("OSSRH_USERNAME") != null ? System.getenv("OSSRH_USERNAME") : ""
}

def getGithubPublishUsername() {
    return hasProperty('githubUsername') ? githubUsername: ""
}

def getGithubPackagesAccessToken() {
    return hasProperty('githubAccessToken') ? githubAccessToken: ""
}

def getDate() {
    return new Date().format('yyyy-MM-dd HH:mm:ss')
}


/**
 * Run ./gradlew :utils:clean && ./gradlew :utils:assembleRelease && ./gradlew :utils:publish
 * Run ./gradlew :library:clean && ./gradlew :library:assembleRelease && ./gradlew :library:publish
 * This publishes to all production artefact repositories
 */
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.name
            artifact("$buildDir/outputs/aar/$artifactId-release.aar")
            artifact(sourceJar)
            artifact(javadocJar)
            groupId 'io.ona.kujaku'
            version this.version

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }

            pom {
                if (project.name.equals("utils")) {
                    name = 'Kujaku Utils'
                    description = 'Utilities for Mapping and check-in library for Android using MapBox SDK'
                } else if (project.name.equals("library")) {
                    name = 'Kujaku Library'
                    description = 'Mapping and check-in library for Android using MapBox SDK'
                }

                url = 'http://github.com/onaio/kujaku'
                packaging = 'aar'
                licenses {
                    license {
                        name = 'BSD 2-Clause "Simplified" License'
                        url = 'https://raw.githubusercontent.com/onaio/kujaku/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'ekigamba'
                        name = 'Ephraim Kigamba'
                    }

                    developer {
                        id = 'onaio'
                        name = 'Onaio'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/onaio/kujaku.git'
                    developerConnection = 'scm:git:ssh://github.com/onaio/kujaku.git'
                    url = 'http://github.com/onaio/kujaku'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your or organisation Github userID and REPOSITORY with the repository name on GitHub
             * e.g. "https://maven.pkg.github.com/opensrp/opensrp-client-reporting"
             */
            url = uri("https://maven.pkg.github.com/onaio/kujaku")
            credentials {
                /** Create github.properties in root project folder file with
                 * gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 * Or set env variable GPR_USER & GPR_API_KEY if not adding a properties file
                 */
                username = getGithubPublishUsername()
                password = getGithubPackagesAccessToken()
            }
        }

        maven {
            name = "MavenCentral"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your or organisation Github userID and REPOSITORY with the repository name on GitHub
             * e.g. "https://maven.pkg.github.com/opensrp/opensrp-client-reporting"
             */

            def repositoryURL
            def timestampMsg = " at " + getDate()
            if (!version.contains("SNAPSHOT")) {
                println 'PROCESSING MAVEN RELEASE BUILD VERSION ' + project.VERSION_NAME + timestampMsg + '...'
                repositoryURL = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                        : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            } else {
                println 'PROCESSING MAVEN REMOTE SNAPSHOT BUILD VERSION ' + project.VERSION_NAME + timestampMsg + '...'
                repositoryURL = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                        : "https://s01.oss.sonatype.org/content/repositories/snapshots/"

            }
            url = uri(repositoryURL)
            credentials {
                /** Create gradle.properties in root project folder file with
                 * ossrhUsername=GITHUB_USER_ID & ossrhPassword=PERSONAL_ACCESS_TOKEN
                 */
                username = getOSSRHRepositoryUsername()
                password = getOSSRHRepositoryPassword()
            }
        }
    }
}

signing {
    sign(publishing.publications['mavenJava'])
}

artifacts {
    archives sourceJar
    archives javadocJar
}