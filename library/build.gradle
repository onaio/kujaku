apply plugin: 'com.android.library'
apply plugin: 'jacoco'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.realm:realm-gradle-plugin:4.1.1"
    }
}

apply plugin: 'realm-android'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

version '0.10.0'

project.version = this.version

jacoco {
    toolVersion = jacocoVersion
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName this.version
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("mapbox.sdk.token")) {
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", localProperties["mapbox.sdk.token"]
                } else {
                    println("One of the required config variables is not set in your local.properties");
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
                }
            } else {
                println("local.properties does not exist");
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
            }
        }

        debug {
            // See bug https://github.com/vanniktech/gradle-android-junit-jacoco-plugin/issues/183
            testCoverageEnabled false

            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("mapbox.sdk.token")) {
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", localProperties["mapbox.sdk.token"]
                } else {
                    println("One of the required config variables is not set in your local.properties");
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
                }
            } else {
                println("local.properties does not exist");
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""

            }
        }

    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        /*unitTests.all {
            systemProperty 'robolectric.dependency.repo.id', 'roboMaven'
            systemProperty 'robolectric.dependency.repo.url', "https://repo1.maven.org/maven2"
        }*/
    }
}

dependencies { configuration ->
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation (mapboxSDK) {
        transitive = true;
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-fragment'
    }

    // The local build has an issue fetching this library for some reason which
    // is a dependency of the mapbox-android-sdk. The mapbox-sdk-turf is declared as
    // a runtime dependency
    implementation mapboxSDKTurf
    implementation mapboxAnnotationPlugin

    // Comment the line below when creating releases - The line is for development of the library & utils
    implementation (project(":utils")) {
    // Uncomment the line below when creating releases
    //implementation('io.ona.kujaku:utils:0.9.0') {
        transitive = true;
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk'
        exclude group: 'com.android.support', module: 'support-v4'
    }

    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'org.simpleframework:simple-xml:2.7.1'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.1'
    implementation 'com.jakewharton.timber:timber:5.0.1'

    implementation 'androidx.multidex:multidex:2.0.0'

    customDependencies(this, configuration)
    appPermissionsDependencies(configuration)
    infoWindowDependencies(this, configuration)
    locationDependencies(configuration)
    testDependencies(this, configuration)
}

private static void testDependencies(instance, configuration) {
    configuration.testImplementation instance.junit

    configuration.testImplementation instance.robolectric
    configuration.testImplementation instance.robolectricShadowsMultidex

    configuration.testImplementation 'org.mockito:mockito-inline:2.25.0'

    configuration.testImplementation instance.androidxTestCore
    configuration.androidTestImplementation instance.junit
    configuration.androidTestImplementation 'org.mockito:mockito-android:2.7.22'
    configuration.androidTestImplementation 'org.mockito:mockito-core:2.7.22'
    configuration.androidTestImplementation ('com.android.support.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'net.sf.kxml', module: 'kxml2'
    })
}

private static void infoWindowDependencies(instance, configuration) {
    configuration.implementation "androidx.cardview:cardview:${instance.supportVersion}"
    configuration.implementation "androidx.recyclerview:recyclerview:${instance.supportVersion}"
}

private static void customDependencies(instance, configuration) {
    configuration.implementation 'com.cocoahero.android:geojson:1.0.1@jar'
    configuration.implementation "com.android.volley:volley:${instance.volleyVersion}"
    configuration.implementation 'com.snatik:storage:2.1.0'
}

private static void appPermissionsDependencies(configuration) {
    configuration.implementation 'com.karumi:dexter:6.2.3'
}

private static void locationDependencies(configuration) {
    configuration.implementation 'com.google.android.gms:play-services-location:19.0.1'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// createDebugCoverageReport is not available when android.buildTypes.debug.testCoverageEnabled is false
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) { //, 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*'
                      , 'android/**/*.*', "io/realm/*.*"]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom([mainSrc])
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

// Add github packages, maven-central and sonatype publishing
apply from: '../publish.gradle'