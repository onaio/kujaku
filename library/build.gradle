import groovy.transform.Field

apply plugin: 'com.android.library'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.realm:realm-gradle-plugin:4.1.1"
    }
}

allprojects {
    repositories {
        maven { url "https://dl.google.com/dl/android/maven2/" }
        maven { url "http://dl.bintray.com/ona/kujaku" }
    }
}

apply plugin: 'realm-android'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

version '0.4.0'
project.version = this.version

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

artifacts {
    archives sourceJar
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/library-release.aar")
            artifact(sourceJar)
            groupId 'io.ona.kujaku'
            artifactId 'library'
            version this.version

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

bintray {
    // Get Bintray credential from environment variable
    user = System.getenv('BINTRAY_USER') // Get bintray User
    key = System.getenv('BINTRAY_KEY') // Get bintray Secret Key
    configurations = ['archives']
    pkg {
        repo = 'kujaku'
        name = project.name
        userOrg = 'ona'
        licenses = ['Apache-2.0']
        desc = 'Kujaku library'
        websiteUrl = "https://ona.io"
        publish = true
        vcsUrl = "https://github.com/onaio/kujaku.git"
        version {
            name = this.version
            desc = "Kujaku library version ${this.version}"
            released = new Date()
            vcsTag = this.version
        }
    }
    publications = ['Production']
}

android {

    compileSdkVersion 27
    buildToolsVersion "28.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName this.version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("mapbox.sdk.token")) {
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
                } else {
                    println("One of the required config variables is not set in your local.properties");
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
                }
            } else {
                println("local.properties does not exist");
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
            }
        }

        debug {
            if (project.rootProject.file("local.properties").exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file("local.properties").newDataInputStream())
                if (properties != null &&
                        properties.containsKey("mapbox.sdk.token")) {
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
                } else {
                    println("One of the required config variables is not set in your local.properties");
                    buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
                }
            } else {
                println("local.properties does not exist");
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""

            }
        }

    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

@Field def supportVersion = '27.1.1'

dependencies { configuration ->
    implementation "com.android.support:support-v4:${supportVersion}"
    implementation ('com.mapbox.mapboxsdk:mapbox-android-sdk:6.5.0') {
        transitive = true;
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-fragment'
    }

    implementation (project(":utils")) {
    //implementation('io.ona.kujaku:utils:0.2.6-87-1') {
        transitive = true;
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    implementation "com.android.support:appcompat-v7:${supportVersion}"
    implementation "com.android.support:design:${supportVersion}"

    customDependencies(configuration)
    appPermissionsDependencies(configuration)
    infoWindowDependencies(this, configuration)
    locationDependencies(configuration)
    testDependencies(configuration)
}

private static void testDependencies(configuration) {
    configuration.testImplementation 'junit:junit:4.12'
    configuration.testImplementation 'org.robolectric:robolectric:3.5.1'
    configuration.testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'

    configuration.testImplementation 'org.mockito:mockito-core:1.10.19'

    configuration.testImplementation "org.powermock:powermock-module-junit4:1.6.2"
    configuration.testImplementation "org.powermock:powermock-module-junit4-rule:1.6.2"
    configuration.testImplementation "org.powermock:powermock-api-mockito:1.6.2"
    configuration.testImplementation "org.powermock:powermock-classloading-xstream:1.6.2"

    configuration.androidTestImplementation 'org.mockito:mockito-android:2.7.22'
    configuration.androidTestImplementation ('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

private static void infoWindowDependencies(instance, configuration) {
    configuration.implementation "com.android.support:cardview-v7:${instance.supportVersion}"
    configuration.implementation "com.android.support:recyclerview-v7:${instance.supportVersion}"
}

private static void customDependencies(configuration) {
    configuration.implementation 'com.cocoahero.android:geojson:1.0.1@jar'
    configuration.implementation 'com.android.volley:volley:1.0.0'
    configuration.implementation 'com.snatik:storage:2.1.0'
    configuration.implementation group: 'joda-time', name: 'joda-time', version: '2.9.9'
}

private static void appPermissionsDependencies(configuration) {
    configuration.implementation 'com.karumi:dexter:5.0.0'
}

private static void locationDependencies(configuration) {
    configuration.implementation 'com.google.android.gms:play-services-maps:8.4.0'
    configuration.implementation 'com.google.android.gms:play-services-location:8.4.0'
}
