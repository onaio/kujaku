allprojects {
    repositories {
        maven { url "https://dl.google.com/dl/android/maven2/" }
        maven { url "https://jitpack.io" }
        maven {
            url "https://dl.cloudsmith.io/public/terraframe/geoprism-registry/maven/"
        }
        mavenLocal()
        //mavenCentral()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.google.firebase.crashlytics'


ant.condition(property: 'os', value: 'windows') {
    os(family: 'windows')
}
ant.condition(property: 'os', value: 'unix') {
    os(family: 'unix')
}

// Based on http://stackoverflow.com/questions/17097263#24121734
def getMasterCommitCount = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            switch (ant.properties.os) {
                case 'windows':
                    commandLine 'cmd', '/c', 'git', 'rev-list', '--first-parent', '--count', 'master'
                    break
                case 'unix':
                    commandLine 'git', 'rev-list', '--first-parent', '--count', 'origin/master'
                    break
            }
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    } catch (ignored) {
        return -1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            switch (ant.properties.os) {
                case 'windows':
                    commandLine 'cmd', '/c', 'git', 'describe', '--tags', '--dirty', '--always'
                    break
                case 'unix':
                    commandLine 'git', 'describe', '--tags', '--dirty', '--always'
                    break
            }
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}

// LOAD PROPERTIES FILE
Properties properties = new Properties()
String[] propertyKeys = ["cgr.username", "cgr.password", "cgr.url", "mapbox.sdk.token"]

if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file("local.properties").newDataInputStream())

    if (properties != null) {
        boolean containsAllKeys = true

        for (String propertyKey: propertyKeys) {
            if (!properties.containsKey(propertyKey)) {
                containsAllKeys = false;
                break
            }
        }

        if (!containsAllKeys) {
            println(("One of the required config variables is not set in your local.properties. Make sure you have " + propertyKeys.join(", ")))
        }
    } else {
        println("Properties was null!! The file does not exist or contains nothing")
    }
} else {
    println("local.properties does not exist")
}

if (properties == null) {
    properties = new Properties();
}

for (String propertyKey: propertyKeys) {
    if (!properties.containsKey(propertyKey)) {
        properties.put(propertyKey, "\"\"")
    }
}


jacoco {
    toolVersion = jacocoVersion
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "io.ona.kujaku.sample"
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getMasterCommitCount()
        versionName getVersionName()

        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
            buildConfigField "String", "CGR_USERNAME", properties["cgr.username"]
            buildConfigField "String", "CGR_PASSWORD", properties["cgr.password"]
            buildConfigField "String", "CGR_URL", properties["cgr.url"]
            buildConfigField "long", "MAPBOX_DOWNLOAD_TILE_LIMIT", "6001"
        }

        debug {
            testCoverageEnabled true
            buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
            buildConfigField "String", "CGR_USERNAME", properties["cgr.username"]
            buildConfigField "String", "CGR_PASSWORD", properties["cgr.password"]
            buildConfigField "String", "CGR_URL", properties["cgr.url"]
            buildConfigField "long", "MAPBOX_DOWNLOAD_TILE_LIMIT", "6001"
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies { configuration ->

    //libraryModuleRelease(configuration)
    libraryModuleDevelopment(this, configuration)
    implementation 'com.cocoahero.android:geojson:1.0.1@jar'

    implementation "com.android.volley:volley:${volleyVersion}"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'com.github.GrenderG:Toasty:1.3.0'
    implementation 'net.zetetic:android-database-sqlcipher:3.5.9@aar'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'


    firebaseCrashlytics(configuration)

    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation ('com.cgr.adapter:cgradapter-android:0.18.1') {
        exclude group: "com.android.support", module: "appcompat-v7"
    }

    implementation 'androidx.multidex:multidex:2.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.3.1'
}

// This is used for normal develoment of Kujaku
private static void libraryModuleDevelopment(instance, configuration) {
    configuration.implementation(instance.project(":library")) {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk'
        exclude group: 'io.ona.kujaku', module: 'utils'
        exclude group: 'org.jacoco'
    }

    configuration.implementation(instance.project(":utils")) {
        transitive = true;
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'org.jacoco'
    }

    configuration.implementation("com.mapbox.mapboxsdk:mapbox-android-sdk:${instance.mapboxSdkVersion}") {
        transitive = true;
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-fragment'
    }

    configuration.implementation 'com.mapbox.mapboxsdk:mapbox-sdk-turf:4.8.0'

    configuration.implementation "com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v7:${instance.mapboxAnnotationPluginVersion}"
}

// This is used when making a release and you need to test that the published artifacts work in host applications OK
private static void libraryModuleRelease(configuration) {
    configuration.implementation 'io.ona.kujaku:library:0.9.0'
}

private static void firebaseCrashlytics(configuration) {
    // Import the BoM for the Firebase platform
    configuration.implementation configuration.platform('com.google.firebase:firebase-bom:28.4.2')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    configuration.implementation 'com.google.firebase:firebase-crashlytics'
    configuration.implementation 'com.google.firebase:firebase-analytics'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*'
                      , 'android/**/*.*', "io/realm/*.*", "io/ona/kujaku/sample/activities/*.*"]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}
