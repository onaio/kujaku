apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.google.firebase.crashlytics'

jacoco {
    toolVersion = jacocoVersion
}

android {

    namespace "io.ona.kujaku.sample"

    buildFeatures {
        buildConfig = true
    }

    compileSdk rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "io.ona.kujaku.sample"
        minSdkVersion 21
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getMasterCommitCount()
        versionName getVersionName()

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"" + localProperties["mapbox.sdk.token"] + "\""
            buildConfigField "String", "CGR_USERNAME", localProperties["cgr.username"]
            buildConfigField "String", "CGR_PASSWORD", localProperties["cgr.password"]
            buildConfigField "String", "CGR_URL", localProperties["cgr.url"]
            buildConfigField "long", "MAPBOX_DOWNLOAD_TILE_LIMIT", "6001"
        }

        debug {
            // See bug https://github.com/vanniktech/gradle-android-junit-jacoco-plugin/issues/183
            testCoverageEnabled true
            buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"" + localProperties["mapbox.sdk.token"] + "\""
            buildConfigField "String", "CGR_USERNAME", localProperties["cgr.username"]
            buildConfigField "String", "CGR_PASSWORD", localProperties["cgr.password"]
            buildConfigField "String", "CGR_URL", localProperties["cgr.url"]
            buildConfigField "long", "MAPBOX_DOWNLOAD_TILE_LIMIT", "6001"
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies { configuration ->

    //libraryModuleRelease(configuration)
    libraryModuleDevelopment(this, configuration)
    implementation 'com.cocoahero.android:geojson:1.0.1@jar'

    implementation "com.android.volley:volley:${volleyVersion}"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.6.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'com.github.GrenderG:Toasty:1.3.0'
    implementation 'net.zetetic:sqlcipher-android:4.6.0@aar'
    implementation 'androidx.sqlite:sqlite:2.4.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'


    firebaseCrashlytics(configuration)

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'

    implementation 'com.jakewharton.timber:timber:5.0.1'

    implementation ('com.cgr.adapter:cgradapter-android:0.19.2') {
        exclude group: "com.android.support", module: "appcompat-v7"
    }

    testImplementation junit
    testImplementation robolectric
}

// This is used for normal develoment of Kujaku
private static void libraryModuleDevelopment(instance, configuration) {
    configuration.implementation(instance.project(":library")) {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk'
        exclude group: 'io.ona.kujaku', module: 'utils'
        exclude group: 'org.jacoco'
    }

    configuration.implementation(instance.project(":utils")) {
        transitive = true
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'org.jacoco'
    }

    configuration.implementation(instance.mapboxSDK) {
        transitive = true
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-fragment'
    }

    configuration.implementation instance.mapboxSDKTurf

    configuration.implementation instance.mapboxAnnotationPlugin
}

// This is used when making a release and you need to test that the published artifacts work in host applications OK
private static void libraryModuleRelease(configuration) {
    configuration.implementation 'io.ona.kujaku:library:0.9.0'
}

private static void firebaseCrashlytics(configuration) {
    // Import the BoM for the Firebase platform
    configuration.implementation configuration.platform('com.google.firebase:firebase-bom:28.4.2')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    configuration.implementation 'com.google.firebase:firebase-crashlytics'
    configuration.implementation 'com.google.firebase:firebase-analytics'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

apply from: '../jacoco-report.gradle'
